scalar DateTime

input ArticleInput {
    content: String!
    title: String
    images: [ID]!
}

input BoardInput {
    name: String!
}

input EventInput {
    name: String!
    description: String
    recrutingStart: DateTime!
    recrutingEnd: DateTime!
    eventStart: DateTime!
    eventEnd: DateTime!
    images: [ID]!
}

input PositionHonorInput {
    position: ID!
    honor: Int!
}

input ProjectInput {
    name: String!
    event: ID
}

input TaskInput {
    name: String!
    difficulty: Int
    order: Int
    progress: ID
    users: [ID]!
    positions: [ID]!
}

input TaskReviewInput {
    honor: Int!
    task: ID!
}

input TeamInput {
    name: String!
}

input ThreadInput {
    name: String!
    firstArticle: ArticleInput!
    event: ID
    team: ID
}

input UserInput {
    name: String!
    email: String!
    biography: String
    image: ID
}

input UserReviewInput {
    toUser: ID!
    honors: [PositionHonorInput]!
}

input VoteInput {
    user: ID!
    article: ID!
    voteType: ID!
}

input WorkInput {
    name: String!
    order: Int
}

type Article {
    id: ID!
    content: String!
    viewCount: Int!
    createdAt: DateTime!
    modifiedAt: DateTime!
    title: String
    thread: Thread!
    user: User!
    parent: Article
    images: [Image]!
}

type Board {
    id: ID!
    name: String!
    getUsers(page: Int!, pageSize: Int!): [User]!
    getThreads(page: Int!, pageSize: Int!): [Thread]!
}

type Event {
    id: ID!
    name: String!
    description: String!
    images: [Image]!
    recruitingStart: DateTime!
    recruitingEnd: DateTime!
    eventStart: DateTime!
    eventEnd: DateTime!
}

type Image {
    id: ID!
    address: String!
}

type Notification {
    id: ID!
    title: String!
    content: String
    createdAt: DateTime!
    user: User!
}

type OAuth2User {
    provider: String!
    id: String!
    name: String!
    email: String
}

type Position {
    id: ID!
    name: String!
}

type Progress {
    id: ID!
    name: String!
}

type Project {
    id: ID!
    name: String!
    team: Team!
    getUsers(page: Int!, pageSize: Int!): [User]!
    event: Event
    works: [Work]!
}

type Role {
    id: ID!
    name: String!
}

type Star {
    id: ID!
    user: User!
    article: Article!
}

type Tag {
    id: ID!
    name: String!
}

type Task {
    id: ID!
    name: String!
    difficulty: Int!
    order: Int!
    work: Work!
    progress: Progress!
    honors: [TaskHonor]!
    users: [User]!
}

type TaskHonor {
    honor: Int!
    task: Task!
    position: Position!
}

type Team {
    id: ID!
    name: String!
    projects: [Project]!
    getUsers(page: Int!, pageSize: Int!): [User]!
}

type Thread {
    id: ID!
    name: String!
    board: Board!
    user: User!
    team: Team
    event: Event
    firstArticle: Article!
    getArticles(page: Int!, pageSize: Int!): [Article]!
    upCount: Int!
    downCount: Int!
    starCount: Int!
    commentCount: Int!
}

type User {
    id: ID!
    oauth2Provider: String!
    oauth2Id: String!
    name: String!
    email: String!
    biography: String
    totalHonor: Int!
    honors: [UserHonor]!
    image: Image
    blog: Board
    getArticles(page: Int!, pageSize: Int!): [Article]!
    getFollowers(page: Int!, pageSize: Int!): [User]!
    getFollowings(page: Int!, pageSize: Int!): [User]!
    getNotifications(page: Int!, pageSize: Int!): [Notification]!
    getProjects(page: Int!, pageSize: Int!): [Project]!
    getTeams(page: Int!, pageSize: Int!): [Team]!
    getThreads(page: Int!, pageSize: Int!): [Thread]!
    getUserEvaluations(page: Int!, pageSize: Int!): [UserEvaluation]!
}

type UserEvaluation {
    id: ID!
    startedAt: DateTime!
    days: Int! 
    project: Project!
    reviews: [UserReview]!
}

type UserHonor {
    id: ID!
    honor: Int!
    user: User!
    position: Position!
}

type UserReview {
    id: ID!
    honor: Int!
    position: Position!
    fromUser: User!
    toUser: User!
    evaluation: UserEvaluation!
}

type Vote {
    id: ID!
    user: User!
    article: Article!
    voteType: VoteType!
}

type VoteType {
    id: ID!
    name: String!
}

type Work {
    id: ID!
    project: Project!
    name: String!
    opened: Boolean!
    order: Int!
    tasks: [Task]!
}

type Query {
    ping: String!
    boards: [Board]!
    currentUser: User
    currentOAuth2User: OAuth2User
    positions: [Position]!
    progresses: [Progress]!
    voteTypes: [VoteType]!
    getArticle(id: ID!): Article
    getBoard(id: ID!): Board
    getBoardByName(name: String!): Board
    getBoardsByNames(names: [String]!): [Board]!
    getImage(id: ID!): Image
    getNotification(id: ID!): Notification
    getProject(id: ID!): Project
    getTask(id: ID!): Task
    getTeam(id: ID!): Team
    getTeamByName(name: String!): Team
    getThread(id: ID!): Thread
    getThreadsByBoards(boards: [ID]!, page: Int!, pageSize: Int!): [Thread]!
    getThreadsByBoardNames(boards: [String]!, page: Int!, pageSize: Int!): [Thread]!
    getHotThreadsByBoardNames(boards: [String]!, page: Int!, pageSize: Int!): [Thread]!
    getUser(id: ID!): User
    getUserByName(name: String!): User
    getUsers(page: Int!, pageSize: Int!): [User]!
    getWork(id: ID!): Work
}

type Mutation {

    """CREATE"""
    createArticle(article: ArticleInput!, thread: ID!, parent: ID): Article
    createBoard(board: BoardInput!): Board
    createEvent(event: EventInput!): Event
    createFollowing(user: ID!): Boolean
    createImage(address: String!): Image
    createPosition(name: String!): Position
    createProject(project: ProjectInput!, team: ID!): Project
    createRole(name: String!): Role
    createStar(user: ID!, article: ID!): Star
    createTag(name: String!): Tag
    createTask(task: TaskInput!, work: ID!): Task
    createTeam(team: TeamInput!): Team
    createThread(thread: ThreadInput!, board: ID!): Thread
    createUser(user: UserInput!): User
    createVote(vote: VoteInput!): Vote
    createVoteType(name: String!): VoteType
    createWork(work: WorkInput!, project: ID!): Work

    """UPDATE"""
    updateArticle(article: ArticleInput!, id: ID!): Article
    updateBoard(board: BoardInput!, id: ID!): Board
    updateEvent(event: EventInput!, id: ID!): Event
    updateProject(project: ProjectInput!, id: ID!): Project
    updateProjectFinish(id: ID!): Boolean!
    updateTask(task: TaskInput!, id: ID!): Task
    updateTaskReview(taskReview: TaskReviewInput!): Boolean!
    updateTeam(team: TeamInput!, id: ID!): Team
    updateThread(thread: ThreadInput!, id: ID!): Thread
    updateUser(user: UserInput!): User
    updateUserReviews(reviews: [UserReviewInput]!, evaluation: ID!): Boolean!
    updateVote(vote: ID!, voteTypes: [ID]!): Vote
    updateWork(work: WorkInput!, id: ID!): Work

    """DELETE"""
    deleteArticle(id: ID!): Boolean!
    deleteBoard(id: ID!): Boolean!
    deleteEvent(id: ID!): Boolean!
    deleteFollowing(id: ID!): Boolean
    deleteImage(id: ID!): Boolean!
    deleteProject(id: ID!): Boolean!
    deleteRole(id: ID!): Boolean!
    deleteTag(id: ID!): Boolean!
    deleteTask(id: ID!): Boolean!
    deleteTeam(id: ID!): Boolean!
    deleteThread(id: ID!): Boolean!
    deleteUser(id: ID!): Boolean!
    deleteVote(id: ID!): Boolean!
    deleteVoteType(id: ID!): Boolean!
    deleteWork(id: ID!): Boolean!
}
