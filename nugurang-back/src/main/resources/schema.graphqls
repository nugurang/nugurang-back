scalar DateTime

type Article {
    id: ID!
    thread: Thread!
    user: User!
    parent: Article
    title: String
    content: String!
    viewCount: Int!
    createdAt: DateTime!
    modifiedAt: DateTime!
}

type Board {
    id: ID!
    name: String!
    getUsers(page: Int!, pageSize: Int!): [User]!
    getThreads(page: Int!, pageSize: Int!): [Thread]!
}

type Event {
    id: ID!
    title: String!
    content: String!
    images: [Image]!
    recruitingStart: DateTime!
    recruitingEnd: DateTime!
    eventStart: DateTime!
    eventEnd: DateTime!
}

type Following {
    id: ID!
    fromUser: User!
    toUser: User!
}

type Image {
    id: ID!
    address: String!
}

type Notification {
    id: ID!
    title: String!
    content: String
    at: DateTime!
    user: User!
    article: Article
    team: Team
}

type OAuth2User {
    provider: String!
    id: String!
    name: String!
    email: String
}

type Position {
    id: ID!
    name: String!
}

type Progress {
    id: ID!
    name: String!
}

type Project {
    id: ID!
    team: Team!
    name: String!
    event: Event!
}

type Role {
    id: ID!
    name: String!
}

type Star {
    id: ID!
    user: User!
    article: Article!
}

type Tag {
    id: ID!
    name: String!
}

type Task {
    id: ID!
    name: String!
    difficulty: Int!
    order: Int!
    work: Work!
    progress: Progress!
    honors: [TaskHonor]!
    users: [User]!
}

type TaskHonor {
    honor: Int!
    task: Task!
    position: Position!
}

type Team {
    id: ID!
    name: String!
    users: [User]!
    projects: [Project]!
}

type Thread {
    id: ID!
    name: String!
    board: Board!
    user: User!
    team: Team!
    event: Event!
    getArticles(page: Int!, pageSize: Int!): [Article]!
    image: Image
    upCount: Int!
    downCount: Int!
    starCount: Int!
}

type User {
    id: ID!
    oauth2Provider: String!
    oauth2Id: String!
    name: String!
    email: String!
    biography: String
    totalHonor: Int!
    honors: [UserHonor]!
    image: Image
    blog: Board
    getFollowings(page: Int!, pageSize: Int!): [User]!
    getFollowers(page: Int!, pageSize: Int!): [User]!
    getThreads(page: Int!, pageSize: Int!): [Thread]!
    getArticles(page: Int!, pageSize: Int!): [Article]!
    getNotifications(page: Int!, pageSize: Int!): [Notification]!
}

type UserHonor {
    honor: Int!
    user: User!
    position: Position!
}

type Vote {
    id: ID!
    user: User!
    article: Article!
    voteType: VoteType!
}

type VoteType {
    id: ID!
    name: String!
}

type Work {
    id: ID!
    project: Project!
    name: String!
    opened: Boolean!
    order: Int!
}

type Query {
    ping: String!
    boards: [Board]!
    currentUser: User
    currentOAuth2User: OAuth2User
    getArticle(id: ID!): Article
    getBoard(id: ID!): Board
    getBoardByName(name: String!): Board
    getBoardsByNames(names: [String]!): [Board]!
    getProject(id: ID!): Project
    getTeam(id: ID!): Team
    getTeamByName(name: String!): Team
    getThread(id: ID!): Thread
    getThreadsByBoards(boards: [ID]!, page: Int!, pageSize: Int!): [Thread]!
    getThreadsByBoardNames(boards: [String]!, page: Int!, pageSize: Int!): [Thread]!
    getUser(id: ID!): User
    getUserByName(name: String!): User
    getUsers(page: Int!, pageSize: Int!): [User]!
}

type Mutation {
    """CREATE"""
    createArticle(content: String!, title: String, thread: ID!, parent: ID): Article
    createBoard(name: String!): Board
    createEvent(board: ID!, name: String!, content: String, images: [ID]!): Event
    createFollowing(fromUser: ID!, toUser: ID!): Following
    createImage(address: String!): Image
    createProject(team: ID!, name: String!, event: ID!): Project
    createRole(name: String!): Role
    createStar(user: ID!, article: ID!): Star
    createTag(name: String!): Tag
    createTask(work: ID!, name: String!, difficulty: Int!): Task
    createTeam(name: String!): Team
    createThread(board: ID!, name: String!, team: ID, event: ID): Thread
    createUser(name: String!, email: String!, biography: String, image: ID): User
    createVote(user: ID!, article: ID!, voteTypes: [ID]!): Vote
    createVoteType(name: String!): VoteType
    createWork(project: ID!, name: String!): Work
    """UPDATE"""
    updateArticle(article: ID!, thread: ID!, parent: ID!, title: String, content: String!): Article
    updateBoard(board: ID!, name: String!): Board
    updateEvent(event: ID!, title: String!, content: String!, images: [ID]!, recrutingStart: DateTime!, recrutingEnd: DateTime!, eventStart: DateTime!, eventEnd: DateTime!): Event
    updateProject(project: ID!, team: ID!, name: String!, event: ID): Project
    updateTask(task: ID!, work: ID!, name: String!, users: [ID]!, order: Int!, progress: Int!, difficulty: Int!, positions: [ID]!): Task
    updateTeam(team: ID!, name: String!, users: [ID]!): Team
    updateThread(thread: ID!, board: ID!, name: String, event: ID): Thread
    updateUser(user: ID!, name: String!, email: String!, image: ID): User
    updateVote(vote: ID!, voteTypes: [ID]!): Vote
    updateWork(work: ID!, project: ID!, name: String!, order: Int!): Work
    """DELETE"""
    deleteArticle(id: ID!): Boolean!
    deleteBoard(id: ID!): Boolean!
    deleteEvent(id: ID!): Boolean!
    deleteFollowing(id: ID!): Boolean!
    deleteImage(id: ID!): Boolean!
    deleteProject(id: ID!): Boolean!
    deleteRole(id: ID!): Boolean!
    deleteTag(id: ID!): Boolean!
    deleteTask(id: ID!): Boolean!
    deleteTeam(id: ID!): Boolean!
    deleteThread(id: ID!): Boolean!
    deleteUser(id: ID!): Boolean!
    deleteVote(id: ID!): Boolean!
    deleteVoteType(id: ID!): Boolean!
    deleteWork(id: ID!): Boolean!
}
