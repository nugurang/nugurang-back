scalar DateTime
"""Query: SELECT"""
type Query {
    getBoard(id: ID): Board!
    getProject(id: ID): Project!
    getTeam(id: ID): Team!
    getUser(id: ID): User!
}

"""Mutation: INSERT, UPDATE, DELETE"""
type Mutation {
    """CREATE"""
    createArticle(user: User!, thread: Thread!, parent: Article, title: String!, content: String!): Article
    createBoard(name: String!): Board
    createEvent(board: Board!, name: String!, content: String, image: [Image]!): Event
    createFollowing(fromUser: User!, toUser: User!): Following
    createImage(address: String!): Image
    createNotification(user: User!, article: Article!): Notification
    createProject(team: Team!, name: String!, event: Event!): Position
    createRole(name: String!): Role
    createStar(user: User!, article: Article!): Star
    createTag(name: String!): Tag
    createTask(work: Work!, name: String!, difficulty: Int!): Task
    createTeam(name: String!): Team
    createThread(board: Board!, name: String!, user: User!, userTeam: Team!, event: Event!): Thread
    createUser(password: String!, name: String!, email: String!, image: Image): User
    createVote(user: User!, article: Article!, voteType: [VoteType]!): Vote
    createVoteType(name: String!): VoteType
    createWork(project: Project!, name: String!): Work
    """UPDATE"""
    updateArticle(id: ID!, thread: Thread!, parent: Article!, title: String, content: String!): Article
    updateBoard(id: ID!, name: String!): Board
    updateEvent(id: ID!, title: String!, content: String!, image: [Image]!, recrutingStart: DateTime!, recrutingEnd: DateTime!, eventStart: DateTime!, eventEnd: DateTime!): Event
    updateProject(id: ID!, team: Team!, name: String!, event: Event): Project
    updateTask(id: ID!, work: Work!, name: String!, users: [User]!, order: Int!, progress: Int!, difficulty: Int!, positions: [Position]!): Task
    updateTeam(id: ID!, name: String!, users: [User]!): Team
    updateThread(id: ID!, board: Board!, name: String, event: Event): Thread
    updateUser(id: ID!, password: String!, name: String!, email: String!, image: image!): User
    updateVote(id: ID!, voteType: [VoteType]!): Vote
    updateWork(id: ID!, project: Project!, name: String!, order: Int!): Work
    """DELETE"""
    deleteArticle(id: ID!): Boolean!
    deleteBoard(id: ID!): Boolean!
    deleteEvent(id: ID!): Boolean!
    deleteFollowing(id: ID!): Boolean!
    deleteImage(id: ID!): Boolean!
    deleteNotification(id: ID!): Boolean!
    deleteProject(id: ID!): Boolean!
    deleteRole(id: ID!): Boolean!
    deleteTag(id: ID!): Boolean!
    deleteTask(id: ID!): Boolean!
    deleteTeam(id: ID!): Boolean!
    deleteThread(id: ID!): Boolean!
    deleteUser(id: ID!): Boolean!
    deleteVote(id: ID!): Boolean!
    deleteVoteType(id: ID!): Boolean!
    deleteWork(id: ID!): Boolean!
}

"""Custom Scalar"""
scalar DateTime

"""Enum"""
enum ProgressType {
    TODO
    DOING
    DONE
}

"""Type"""
type Article {
    id: ID!
    thread: Thread!
    user: User!
    parent: Article
    title: String
    content: String!
    viewCount: Int!
    createdAt: DateTime!
    modifiedAt: DateTime!
}

type Board {
    id: ID!
    name: String!
}

type Event {
    id: ID!
    board: Board!
    title: String!
    content: String!
    image: [Image]!
    recruitingStart: DateTime!
    recruitingEnd: DateTime!
    eventStart: DateTime!
    eventEnd: DateTime!
}

type Following {
    id: ID!
    fromUser: User!
    toUser: User!
}

type Image {
    id: ID!
    address: String!
}

type Notification {
    id: ID!
    user: User!
    at: DateTime!
    article: Article!
}

type Position {
    id: ID!
    name: String!
}

type Project {
    id: ID!
    team: Team!
    name: String!
    event: Event!
}

type Role {
    id: ID!
    name: String!
}

type Star {
    id: ID!
    user: User!
    article: Article!
}

type Tag {
    id: ID!
    name: String!
}

type Task {
    id: ID!
    work: Work!
    name: String!
    users: [User]!
    order: Int!
    progress: ProgressType!
    difficulty: Int!
    positions: [Position]!
}

type Team {
    id: ID!
    name: String!
    Users: [User]!
}

type Thread {
    id: ID!
    board: Board!
    name: String!
    user: User!
    userTeam: Team!
    event: Event!
}

type User {
    id: ID!
    password: String!
    name: String!
    email: String!
    image: Image
    blog: Board
}

type Vote {
    id: ID!
    user: User!
    article: Article!
    voteType: [VoteType]!
}

type VoteType {
    id: ID!
    name: String!
}

type Work {
    id: ID!
    project: Project!
    name: String!
    order: Int!
}
